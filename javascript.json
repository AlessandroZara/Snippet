{
	// Place your snippets for javascript here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"fetch snippet": {
			"prefix": "fetch",
			"body": [
				"fetch('').then(function(response){",
				"return response.json();",
				"}).then(function(json){",
					"classe = json;",
					"console.log('Dati', classe)",
				"}).catch(function(err){",
				"console.log('Fetch problem' + err.message);",
				"})",
			],
            "description": "chiamate fetch ad un file json"
	
},
"HttpRequest": {
	"prefix": "httpRequest",
	"body": [
		"var xhttp = new XMLHttpRequest();",
    "xhttp.onreadystatechange = function() {",
        "if (this.readyState == 4 && this.status == 200) {",
            "document.getElementById('demo').innerHTML =",
            "this.responseText;",
      " }",
    "};",
    "xhttp.open('GET', 'URL', true);",
    "xhttp.send();",
	],
	"description": "CHiamata AJAX al server"

}, 
"append child": {
	"prefix": "append-child",
	"body": [
		"document.body.appendChild();",
	],
	"description": "appende il filgio al padre"

},
"get Element by id": {
	"prefix": "create-element-id",
	"body": [
		"document.getElementById('').value"
	],
	"description": "Ottenre un elemento ID"

},
"Create element Method": {
	"prefix": "create-element",
	"body": [
		"document.createElement('');"
	],
	"description": "Creare un elemento"

},
"event listner": {
	"prefix": "addEventListner",
	"body": [
		"addEventListner('click, () =>{",

		"}),"
	],
	"description": "Creare un elemento lista"

},
"Async Function": {
	"prefix": "async-function",
	"body": [
		"async function getUtente(userId) {",
			"try {",
			   "let response = await fetch('/utente/' + userId);",
			   "console.log(response);",
			"} catch (e) {",
			   "console.log('Si è verificato un errore!');",
			"}"
	],
	"description": "Chiamata asincrona con una fetch"

},

"Promise async": {
	"prefix": "promise",
	"body": [
		     "async function hello() {",
				"return greeting = await Promise.resolve('Hello');",
			  "};",
			   "hello().then(alert);",
	],
	"description": "Effetuare una chimata asincrona con una promise e await"

},
"Math.random": {
	"prefix": "math.random",
	"body": [
		"Math.random()",
	],
	"description": "restituisce un numero casuale compreso tra 0 (incluso) e 1 (escluso):",

},
"Math.random+Math.floor": {
	"prefix": "math.random.math.floor",
	"body": [
		"Math.floor(Math.random() * 11)",
	],
	"description": "usato per restituire numeri interi casuali.0",

},
"setAttribute": {
	"prefix": "setAttribute",
	"body": [
		"setAttribute('type', 'element')",
	],
	"description": "aggiunge l'attributo specificato a un elemento e gli assegna il valore specificato.",
},
"getAttribute": {
	"prefix": "getAttribute",
	"body": [
		"getAttribute('class');",
	],
	"description": "restituisce il valore dell'attributo con il nome specificato, di un elemento.",

},
"class method ": {
	"prefix": "class",
	"body": [
		"class MyClass {",
			"constructor(field1) {",
				"super(field1); //solo se devo prendere i valori da un altra classe superiore altirmenti non serve",
			"}};",
	],
	"description": "Classe Javascript formata da COSTRUTTORE e SUPER(che viene utilizzato per chiamare il costruttore della classe genitore e per accedere alle proprietà e ai metodi del genitore.)",

},
"toLocalString Method ": {
	"prefix": "Date.toLocaleString",
	"body": [
		"Date.toLocaleString(locales, options)",
	],
	"description": "converte un oggetto Date in una stringa, utilizzando le impostazioni internazionali.",

},
"try method error ": {
	"prefix": "try",
	"body": [
		"try {",
			"if(x == '') throw 'is Empty';",
			"if(isNaN(x)) throw 'not a number';",
			"if(x > 10) throw 'too high';",
			"if(x < 5) throw 'too low';",
		  "}",
		  "catch(err) {",
			"message.innerHTML = 'input' + err;",
		  "}",
	],
	"description": "L'istruzione throw genera (genera) un errore.Quando si verifica un errore, JavaScript normalmente si interrompe e genera un messaggio di errore.L' istruzione try consente di definire un blocco di codice da testare per gli errori durante l'esecuzione.L' istruzione catch consente di definire un blocco di codice da eseguire, se si verifica un errore nel blocco try .",

},

"set intervall method": {
	"prefix": "setInterval",
	"body": [
		"setInterval(function(){ ",
			"javascript function }, millisecondi);",
	],
	"description": "Il metodo setInterval() chiama una funzione o valuta un'espressione a intervalli specificati (in millisecondi)",

},
"cler interval method": {
	"prefix": "clearInterval",
	"body": [
		"clearInterval(costante);",
	],
	"description": "Il metodo clearInterval() cancella un timer impostato con il metodo setInterval().",

},
"setTimeout method": {
	"prefix": "setTimeout()",
	"body": [
		"setTimeout(function(){ alert('Hello'); }, 3000);",
	],
	"description": "Il metodo setTimeout() chiama una funzione o valuta un'espressione dopo un numero specificato di millisecondi."

},
"localStorage save data": {
	"prefix": "localStorage",
	"body": [
		"localStorage.setItem('key', 'value');",
	],
	"description": "Sintassi per SALVARE i dati su localStorage:"

},
"localStorage read data": {
	"prefix": "localStorageRead",
	"body": [
		"var x = localStorage.getItem('key');",
	],
	"description": "Sintassi per la LETTURA dei dati da localStorage:"

},
"localStorage remove data": {
	"prefix": "localStorageRemove",
	"body": [
		"localStorage.removeItem('key');",
	],
	"description": "Sintassi per ELIMINARE i dati su localStorage:"

},
"Map Array metodo1": {
	"prefix": ".map",
	"body": [
		"array.map(ele1 => ele2 *2);",
	],
	"description": "Map negli array come farlo esempio 1"

},
"Map Array metodo2 ": {
	"prefix": ".map",
	"body": [
		"array.map(function(num) {",
			"return Math.sqrt(num)",
		"});",
	],
	"description": "Map negli array come farlo esempio 2",

},
"Reduce Array ": {
	"prefix": ".reduce",
	"body": [
		"let reducer =(prevvValue,currentValue) => prevvValue + currentValue;",
           "let arrayReduce= array.reduce(reducer,0);",
	],
	"description": "Metodo Reduce Negli Array",

},
"Prmise ": {
	"prefix": "promise",
	"body": [
		"let promise = new Promise(function(resolve, reject) {",
			"setTimeout(() => resolve('fatto!''), 1000);// Questo è un esempio ",
			"});",
			"promise.then(",
			"function(result) { /* gestisce un risultato in caso di successo */ },",
			"function(error) { /* gestisce un errore (facoltativa) */ }",
			");",
			"promise.catch(alert); // mostra 'Error: Whoops!' dopo 1 secondo",
	],
	"description": "Effettuare una 'Promise' per una chiamata ad un Server ",

},

}








